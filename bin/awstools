#!/usr/bin/env bash

doc_string="""
awstools - Utility script for managing AWS EC2 instances
Usage: ./awstools [function_name] [instance_name] [additional_parameters]

Functions:
  get-instance        - Retrieves instance information by name
  get-public-ip       - Retrieves the public IP address of the instance
  get-private-ip      - Retrieves the private IP address of the instance
  start-session       - Starts an SSM session with the instance
  ssm-proxy-command   - Executes a proxy command for EC2 instance connection

Example:
  ./awstools get-public-ip my-instance
"""

AWS_RESIONS=(
    ${AWS_RESIONS:-
        "ap-northeast-1"
        "ap-northeast-2"
        "ap-northeast-3"
        "ap-southeast-1"
        "us-east-1"
        "us-east-2"
        "us-west-2"
        "eu-west-3"
        "me-central-1"
    }
)

function parse_options() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -s | --silent)
                SILENT=1
                shift
                ;;
            *)
                break
                ;;
        esac
    done
    echo "$@"
}

function log() {
    if [ "${SILENT:-0}" != "1" ]; then
        echo "$1" >&2
    fi
}

function install() {
    log "==== AWS Tools Installation Start ===="

    if ! [ -d "$HOME/.local/bin" ]; then
        mkdir -p "$HOME/.local/bin"
    fi

    if ! [ -d "$HOME/.ssh" ]; then
        mkdir -p "$HOME/.ssh"
    fi

    FILE_PATH=$(realpath "$0")
    SYMLINK_PATH="$HOME/.local/bin/awstools"
    
    ln -sf "$FILE_PATH" "$SYMLINK_PATH"
    log "Symbolic link created at $SYMLINK_PATH"

    local ssh_config="$HOME/.ssh/config"
    local config_content=$(cat << 'EOF'
# ===== AWS SSM Session Manager SSH Configuration Start =====

# AWS EC2 specific hosts
Host ec2.* ec2-*
    User ubuntu
    ProxyCommand bash -c "awstools ssm-proxy-command $(echo %h | sed 's/^....//') %r %p"
    ForwardAgent yes
    UserKnownHostsFile /dev/null
    StrictHostKeyChecking no

# Default configuration (should be at the end)
Host *
    User ubuntu
    ProxyCommand bash -c "awstools ssm-proxy-command %h %r %p"
    ForwardAgent yes
    UserKnownHostsFile /dev/null
    StrictHostKeyChecking no

# ===== AWS SSM Session Manager SSH Configuration End =====
EOF
)
    if ! grep -q "AWS SSM Session Manager SSH Configuration" "$ssh_config"; then
        [ -f "$ssh_config" ] && [ "$(tail -c1 "$ssh_config" | wc -l)" -eq 0 ] || echo "" >> "$ssh_config"
    fi

if grep -q "# ===== AWS SSM Session Manager SSH Configuration Start =====" "$ssh_config"; then
    sed -i '/# ===== AWS SSM Session Manager SSH Configuration Start =====/,/# ===== AWS SSM Session Manager SSH Configuration End =====/c\
'"$new_config_content" "$ssh_config"
    log "SSH config block replaced in $ssh_config"
else
    echo "$new_config_content" >> "$ssh_config"
    log "SSH config block added in $ssh_config"
fi

    if [ ! -f "$ssh_config" ]; then
        echo "$config_content" > "$ssh_config"
        log "SSH config created and registered in $ssh_config"
    elif grep -q "# ===== AWS SSM Session Manager SSH Configuration Start =====" "$ssh_config"; then
        sed -i '/# ===== AWS SSM Session Manager SSH Configuration Start =====/,/# ===== AWS SSM Session Manager SSH Configuration End =====/c\
'"$config_content" "$ssh_config"
        log "SSH config block replaced in $ssh_config"
    else
        echo "$config_content" >> "$ssh_config"
        log "SSH config registered in $ssh_config"
    fi

    log "==== AWS Tools Installation Complete ===="
}

function print_help() {
    echo "$doc_string"
}

function get_instance_by_name() {
    local name="$1"
    
    local RESULTS="[]"
    local temp_files=()

    for region in "${AWS_RESIONS[@]}"; do
        temp_file=$(mktemp)
        temp_files+=("$temp_file")

        aws ec2 describe-instances \
            --region "$region" \
            --filter "Name=tag:Name,Values=$name" \
            --query "Reservations[].Instances[]" \
            --output json > "$temp_file" &
    done

    wait

    for temp_file in "${temp_files[@]}"; do
        RESULTS=$(jq -c --slurpfile new "$temp_file" '$new[0] + .' <<< "$RESULTS")
        rm -f "$temp_file"
    done

    echo "$RESULTS"
}

function get-public-ip() {
    local instance_name=$1
    local instance=$(get_instance_by_name $instance_name)
    public_ip_address=$(echo "$instance" | jq -r '.[].PublicIpAddress')
    
    echo $public_ip_address
}

function get-private-ip() {
    local instance_name=$1
    local instance=$(get_instance_by_name $instance_name)
    private_ip_address=$(echo "$instance" | jq -r '.[].PrivateIpAddress')
    
    echo $private_ip_address
}

function ec2-instance-connect() {
    
    local instance_id=$1
    local availability_zone=$2
    local user=$3
    local port=$4

    log "=== SECTION: Connection Details ==="
    log "* user: $user"
    log "* port: $port"
    log "* availability_zone: $availability_zone"
    log "* region: ${availability_zone%[a-z]}"

    aws ec2-instance-connect send-ssh-public-key \
        --instance-id  $instance_id \
        --region ${availability_zone%[a-z]} \
        --availability-zone $availability_zone \
        --instance-os-user $user \
        --ssh-public-key file:///$HOME/.ssh/id_rsa.pub > /dev/null;
}

function ssm-proxy-command() {

    local instance_name="$1"
    local user="${2:-ubuntu}"
    local port="${3:-22}"

    local instance=$(get_instance_by_name "$instance_name")
    
    if [ ! -f $HOME/.ssh/id_rsa.pub ]; then
        ssh-keygen -t rsa -b 4096 -f $HOME/.ssh/id_rsa -N "" -C "$(hostname)@no_reply.flitto.com"
    fi

    availability_zone=$(echo "$instance" | jq -r '.[].Placement.AvailabilityZone')
    instance_id=$(echo "$instance" | jq -r '.[].InstanceId')

    ec2-instance-connect ${instance_id} ${availability_zone} ${user} ${port}

    aws ssm start-session --target $instance_id \
        --document-name AWS-StartSSHSession \
        --parameters "portNumber=$port" \
        --region "${availability_zone%[a-z]}"
}


function start-session() {
    local instance_name=$1
    local user=${2:-ubuntu}
    local port=${3:-22}

    local instance=$(get_instance_by_name $instance_name)

    if [ ! -f $HOME/.ssh/id_rsa.pub ]; then
        ssh-keygen -t rsa -b 4096 -f $HOME/.ssh/id_rsa -N "" -C "$(hostname)@no_reply.flitto.com"
    fi

    availability_zone=$(echo "$instance" | jq -r '.[].Placement.AvailabilityZone')
    instance_id=$(echo "$instance" | jq -r '.[].InstanceId')

    ec2-instance-connect $instance_id $availability_zone $user $port

    aws ssm start-session --target $instance_id \
        --parameters "portNumber=$port" \
        --region "${availability_zone%[a-z]}"
}

# =================================
# ==== MAIN FUNCTION EXECUTION ====
# =================================

ARGS=$(parse_options "$@")
set -- $ARGS

function_name=${1:-"--help"}
instance_name=$2

case $function_name in
    get-instance)
        get_instance_by_name "${@:2}"
        ;;
    get-public-ip)
        get-public-ip "${@:2}"
        ;;
    get-private-ip)
        get-private-ip "${@:2}"
        ;;
    start-session)
        start-session "${@:2}"
        ;;
    ssm-proxy-command)       
        ssm-proxy-command "${@:2}"
        ;;
    install )
        install
        ;;
    help | --help | -h)    
        print_help
        ;;
    *)
        echo "Unknown function: $function_name"
        print_help
        exit 1
        ;;
esac

exit 0
